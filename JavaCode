public List<Candidate> evaluateLocations(Document document) {
        List<Object[]> rawLocations = new ArrayList<>();
        List<Object[]> uniqueLocations = new ArrayList<>();
        List<Candidate> rankedLocations = new ArrayList<>();
        double[] weights = this.weights[0];
        double weightsSum = 0;
        for (double weight : weights) {
            weightsSum += weight;
        }
        int maxArea = 1;

        for (Candidate candidate : document.getCandidates(this.getId() + "Locations")) {
            // fetch the boundingbox: (min lat, max lat, min long, max long)
            List<Object> parts = candidate.getRaw();
            Location location = candidate.getCalculations("openstreetmap_nominatim");
            String[] bb = location.raw.get("boundingbox");

            // use the vincenty algorithm to calculate the covered area
            int area = (int) greatCircle(new double[] {Double.parseDouble(bb[0]), Double.parseDouble(bb[2])},
                    new double[] {Double.parseDouble(bb[0]), Double.parseDouble(bb[3])}).meters
                    * (int) greatCircle(new double[] {Double.parseDouble(bb[0]), Double.parseDouble(bb[2])},
                            new double[] {Double.parseDouble(bb[1]), Double.parseDouble(bb[2])}).meters;
            double[] bbDouble = new double[4];
            for (int i = 0; i < 4; i++) {
                bbDouble[i] = Double.parseDouble(bb[i]);
            }
            rawLocations.add(new Object[] {parts, location.raw.get("place_id"), location.point, bbDouble, area, 0, 0,
                    candidate, 0});

            maxArea = Math.max(maxArea, area);
        }

        // sort locations based id
        rawLocations.sort((o1, o2) -> Integer.parseInt((String) o2[1]) - Integer
